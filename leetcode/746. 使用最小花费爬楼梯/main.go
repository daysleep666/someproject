package main

import (
	"fmt"
	"math"
)

var (
	minCost int
	ln      int
	cache   [][]bool
)

func minCostClimbingStairs1(cost []int) int {
	minCost = math.MaxInt32
	ln = len(cost)
	cache = make([][]bool, ln)
	for i, _ := range cache {
		cache[i] = make([]bool, ln*1000)
	}

	d(cost, 0, 0)
	d(cost, 1, 0)
	return minCost
}

func d(cost []int, curI int, curCost int) {
	if curI >= ln {
		if curCost < minCost {
			minCost = curCost
		}
		return
	}
	if cache[curI][curCost] {
		return
	}
	cache[curI][curCost] = true
	if curI+1 <= ln { // 走一步
		d(cost, curI+1, curCost+cost[curI])
	}
	if curI+2 <= ln { // 走两步
		d(cost, curI+2, curCost+cost[curI])
	}
}

func minCostClimbingStairs(cost []int) int {
	ln := len(cost)
	dp := make([]int, ln+1) // dp[第i个阶梯]最小花费
	for i := 2; i <= ln; i++ {
		dp[i] = min(dp[i-1]+cost[i-1], dp[i-2]+cost[i-2])
	}
	return dp[ln]
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func main() {
	fmt.Println(minCostClimbingStairs([]int{1, 100, 1, 1, 1, 100, 1, 1, 100, 1}))
	fmt.Println(minCostClimbingStairs([]int{10, 15, 20}))
	fmt.Println(minCostClimbingStairs([]int{0, 0, 1, 1}))
	fmt.Println(minCostClimbingStairs([]int{951, 846, 22, 560, 698, 140, 413, 185, 152, 50, 236, 368, 551, 248, 990, 146, 607, 867, 36, 850, 884, 424, 636, 609, 648, 286, 571, 980, 434, 17, 816, 437, 895, 863, 830, 55, 31, 15, 401, 397, 798, 300, 960, 410, 609, 380, 630, 940, 70, 336, 184, 359, 303, 214, 971, 325, 531, 249, 533, 485, 389, 887, 236, 773, 101, 782, 205, 836, 572, 407, 961, 561, 511, 939, 291, 786, 387, 611, 875, 65, 519, 405, 546, 476, 126, 309, 22, 521, 306, 343, 670, 693, 831, 150, 770, 460, 297, 724, 194, 707, 185, 30, 628, 982, 394, 733, 807, 589, 929, 184, 816, 172, 688, 194, 700, 147, 161, 438, 638, 244, 823, 855, 513, 971, 421, 340, 379, 356, 588, 728, 922, 560, 824, 862, 869, 331, 997, 801, 892, 107, 185, 261, 871, 715, 615, 453, 180, 693, 520, 727, 664, 75, 489, 389, 980, 6, 689, 225, 614, 2, 921, 703, 818, 862, 653, 156, 967, 143, 162, 509, 131, 17, 271, 531, 515, 334, 58, 280, 260, 287, 761, 208, 126, 456, 597, 234, 136, 461, 226, 912, 461, 307, 931, 670, 196, 513, 448, 496, 904, 273, 521, 611, 325, 213, 769, 4, 910, 319, 534, 895, 611, 913, 435, 105, 766, 736, 366, 522, 437, 234, 232, 494, 398, 371, 315, 553, 159, 877, 46, 187, 95, 503, 541, 201, 622, 601, 833, 85, 323, 393, 315, 5, 996, 478, 513, 235, 274, 169, 294, 214, 484, 88, 589, 879, 724, 487, 377, 737, 469, 236, 829, 697, 898, 755, 554, 265, 94, 267, 781, 938, 394, 229, 493, 530, 112, 237, 460, 100, 76, 678, 8, 219, 367, 434, 369, 830, 607, 311, 820, 141, 552, 449, 360, 50, 774, 655, 797, 429, 580, 266, 904, 46, 835, 146, 104, 164, 883, 915, 913, 895, 450, 734, 674, 464, 694, 307, 591, 420, 729, 581, 220, 129, 257, 517, 822, 560, 95, 993, 860, 146, 915, 349, 774, 878, 824, 524, 21, 679, 175, 136, 569, 407, 732, 968, 468, 308, 786, 123, 409, 144, 634, 852, 848, 862, 720, 5, 185, 807, 770, 123, 69, 291, 488, 850, 976, 184, 429, 542, 708, 58, 329, 274, 492, 29, 935, 351, 169, 482, 257, 998, 584, 464, 153, 550, 558, 258, 696, 112, 415, 457, 815, 277, 737, 266, 479, 165, 768, 306, 791, 332, 696, 88, 447, 357, 394, 152, 540, 648, 174, 858, 267, 809, 47, 790, 433, 166, 466, 773, 906, 250, 752, 670, 402, 252, 895, 951, 224, 127, 322, 969, 744, 987, 861, 494, 446, 551, 228, 753, 112, 29, 508, 69, 240, 774, 3, 686, 501, 871, 638, 184, 625, 884, 238, 493, 335, 400, 482, 558, 671, 824, 621, 776, 966, 22, 532, 377, 526, 670, 500, 612, 468, 364, 879, 948, 427, 830, 282, 881, 389, 133, 203, 451, 146, 131, 63, 41, 487, 331, 443, 18, 409, 266, 227, 676, 553, 163, 622, 28, 465, 182, 812, 538, 503, 799, 820, 280, 557, 300, 264, 610, 396, 426, 65, 595, 531, 932, 993, 228, 585, 460, 905, 517, 69, 103, 334, 224, 162, 514, 85, 258, 314, 473, 315, 128, 97, 889, 326, 322, 636, 355, 869, 605, 822, 841, 115, 549, 105, 359, 744, 710, 420, 718, 305, 818, 474, 634, 367, 523, 459, 279, 693, 629, 760, 179, 976, 632, 748, 734, 479, 552, 904, 804, 718, 384, 71, 482, 803, 379, 178, 346, 130, 49, 357, 620, 524, 897, 186, 113, 364, 247, 718, 963, 770, 137, 172, 526, 380, 111, 577, 749, 765, 716, 680, 172, 389, 277, 581, 680, 308, 341, 724, 910, 464, 878, 51, 795, 256, 471, 751, 573, 819, 573, 739, 678, 398, 620, 114, 224, 696, 146, 548, 747, 174, 224, 600, 696, 808, 627, 340, 524, 957, 459, 286, 911, 944, 815, 989, 744, 828, 9, 484, 882, 232, 610, 524, 408, 332, 137, 438, 545, 591, 252, 27, 477, 854, 708, 389, 131, 905, 177, 583, 432, 605, 611, 769, 391, 799, 285, 185, 389, 42, 643, 3, 867, 173, 68, 485, 544, 654, 685, 981, 290, 75, 447, 567, 240, 327, 931, 431, 743, 604, 485, 801, 808, 63, 591, 240, 556, 571, 573, 328, 164, 53, 358, 179, 262, 735, 390, 651, 399, 551, 802, 779, 673, 269, 703, 162, 348, 95, 465, 867, 470, 249, 293, 905, 935, 314, 9, 568, 253, 401, 356, 909, 228, 16, 468, 674, 446, 257, 736, 579, 512, 700, 459, 178, 684, 531, 544, 286, 716, 133, 201, 721, 694, 225, 12, 713, 787, 351, 745, 227, 302, 52, 122, 487, 267, 70, 643, 569, 385, 998, 663, 64, 653, 37, 982, 185, 651, 646, 812, 854, 230, 690, 516, 791, 515, 276, 48, 231, 406, 657, 203, 514, 74, 180, 749, 183, 135, 350, 310, 864, 110, 754, 772, 59, 382, 144, 602, 209, 678, 677, 817, 532, 987, 188, 536, 248, 686, 37, 515, 176, 454, 601, 281, 728, 149, 346, 428, 397, 812, 286, 875, 885, 24, 919, 803, 737, 491, 578, 863, 307, 782, 627, 596, 443, 760, 459, 960, 623, 30, 15, 740, 165, 215, 914, 301, 989, 8, 674, 202, 1, 769, 149, 443, 328, 775, 127, 161, 302, 168, 258, 237, 525, 334, 936, 318, 96, 823, 35, 667, 633, 512, 683, 362, 377, 408, 634, 699, 437, 890, 412, 984, 996, 733, 193, 584, 840, 376, 471, 566, 913, 14, 127, 92, 309, 240, 408, 788, 900, 112, 841, 477, 440, 598, 202, 349, 231, 836, 895, 478, 479, 73, 170, 389, 631, 902, 221, 522, 901, 523, 805, 873, 548, 304, 79, 711, 991, 715, 188, 986, 873, 965, 300, 125, 109, 905, 590, 253, 447, 672, 546, 956, 609, 475, 794, 561, 70, 124, 211, 451, 652, 477, 764, 762, 179, 684, 232, 725, 729, 240, 818, 241, 570, 790, 674, 141, 882, 132, 703, 162, 907, 559, 503, 105, 394, 852, 281, 116, 804, 564}))
}
